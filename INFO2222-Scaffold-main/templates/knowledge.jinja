{% extends 'base.jinja' %}

{% block content %}
<style>
    body {
        font-family: 'Arial', sans-serif;
        background: #f0f0f0;
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: row;
        height: 100vh;
    }

    nav {
        width: 100%;
        border-bottom: 1px solid #ddd;
        padding: 10px 0;
        background-color: #fff;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1000;
        height: 60px; /* 确保导航栏有足够的高度 */
    }

    .nav-link {
        padding: 10px 15px;
        color: #333;
        text-decoration: none;
        font-weight: bold;
        transition: background-color 0.3s ease;
    }

    .nav-link:hover {
        background-color: #e0e0e0;
        border-radius: 5px;
    }

    .nav-links,
    .user-info {
        display: flex;
        align-items: center;
    }

    .user-info li {
        list-style: none;
        margin-right: 10px;
    }

    .btn {
        color: #333;
        font-weight: bold;
        text-decoration: none;
        cursor: pointer;
    }

    .side-nav {
        width: 250px;
        background-color: #fff;
        padding: 20px;
        padding-top: 80px; /* 留出足够的空间给导航栏 */
        border-right: 1px solid #ddd;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        overflow-y: auto;
        position: fixed;
        top: 0;
        bottom: 0;
    }


    .side-nav ul {
        padding: 0;
        list-style: none;
    }

    .side-nav li {
        margin-bottom: 10px;
    }

    .side-nav a {
        display: block;
        padding: 10px;
        color: #333;
        text-decoration: none;
        border-radius: 5px;
        transition: background-color 0.3s ease;
    }

    .side-nav a:hover {
        background-color: #e0e0e0;
    }

    .user-avatar {
        width: 60px; /* 增加头像的宽度 */
        height: 60px; /* 增加头像的高度 */
        border-radius: 50%;
        background-color: #f2f2f2;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 50px; /* 增加字体大小 */
        margin-bottom: 20px; /* 增加头像下方的间距 */
    }

    .content-area {
        flex: 1;
        padding: 20px;
        overflow-y: auto;
        margin-left: 280px; /* 确保内容区域不被侧边栏遮挡，并添加一些间距 */
        margin-top: 80px; /* 与导航栏保持一致 */
        height: calc(100vh - 80px);
    }
    .btn-new-article {
        background-color: #007bff;
        color: #fff;
        padding: 10px;
        border-radius: 5px;
        text-align: center;
        display: block;
        text-decoration: none;
        margin-bottom: 20px;
        transition: background-color 0.3s ease;
    }

    .btn-new-article:hover {
        background-color: #0056b3;
    }

    .comment-section {
        width: 300px;
        padding: 20px;
        background-color: #f9f9f9;
        border-left: 1px solid #ddd;
        position: fixed;
        right: 0;
        top: 54px;
        bottom: 0;
        overflow-y: auto;
    }

    #comment-list-container {
        height: calc(100% - 160px);
        overflow-y: auto;
    }

    #comment-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    #comment-list li {
        padding: 10px;
        margin-bottom: 10px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    #comment-list li strong {
        display: block;
        color: #007bff;
        margin-bottom: 5px;
    }

    #comment-list li small {
        display: block;
        color: #999;
        margin-top: 5px;
    }

    #comment-text {
        width: 100%;
        box-sizing: border-box;
        margin-top: 10px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .comment-form {
        position: absolute;
        bottom: 20px;
        width: calc(100% - 40px);
    }

    .comment-form button {
        display: block;
        width: 100%;
        padding: 10px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 10px;
        font-size: 16px;
        transition: background-color 0.3s ease;
    }

    .comment-form button:hover {
        background-color: #0056b3;
    }

    .edit-button, .delete-button {
        padding: 8px 12px;
        border: none;
        border-radius: 5px;
        color: white;
        font-size: 14px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .edit-button {
        background-color: #4CAF50;
    }

    .edit-button:hover {
        background-color: #45a049;
    }

    .delete-button {
        background-color: #ff4d4d;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: background-color 0.3s ease, transform 0.3s ease;
    }

    .delete-button:hover {
        background-color: #e60000;
        transform: scale(1.05);
    }

</style>

<nav>
    <!-- Left-aligned items -->
    <div class="nav-links">
        <a href="/home?username={{ username }}" class="nav-link">Home</a>
        <a href="/knowledge" class="nav-link">Knowledge</a>
        <a href="/settings" class="nav-link">Settings</a>
    </div>

    <!-- Right-aligned items -->
    <div class="user-info">
        <ol style="list-style: none; padding: 0;">
            <li data-i18n="username">Username: {{ username }}</li>
            <li>
                <a href="javascript:void(0)" onclick="logoutAndClearStorage()" class="btn">Logout</a>
            </li>
        </ol>
    </div>
</nav>

<div class="side-nav">
    <div class="user-avatar">🤓</div>
    <p><strong>Username:</strong> {{ username }}</p>
    <hr>
    <a href="{{ url_for('new_article_form') }}" class="btn-new-article">New Article</a>

    <p><strong>Articles:</strong></p>
    <ul>
        {% for article in articles %}
            <li><a href="javascript:void(0);" onclick="loadArticle({{ article.id }})" class="nav-link">{{ article.title }}</a></li>
        {% endfor %}
    </ul>
</div>

<div class="content-area">
    <h1>Welcome to the Knowledge Base</h1>
    <p>This is the area where you can add more dynamic content, articles, and other information.</p>
</div>

<div class="comment-section" id="comment-section">
    <h2>Comments</h2>
    <div id="comment-list-container">
        <ul id="comment-list">
            <!-- 评论列表 -->
        </ul>
    </div>
    <form id="comment-form" class="comment-form">
        <textarea id="comment-text" placeholder="Add a comment..."></textarea>
        <button type="button" onclick="submitComment()">Post Comment</button>
    </form>
</div>

<script>
    let currentArticleId = null;
    const currentUser = '{{ username }}';
    const canDeleteComments = {{ can_delete_comments|tojson }};

    function loadArticle(articleId) {
        currentArticleId = articleId;
        fetch('/api/article/' + articleId)
            .then(response => response.json())
            .then(data => {
                const contentArea = document.querySelector('.content-area');
                contentArea.innerHTML = '';

                let titleElem = document.createElement('h1');
                let authorElem = document.createElement('p');
                let contentElem = document.createElement('p');

                titleElem.textContent = data.title;

                authorElem.textContent = 'Author: ' + data.author + ' (' + data.author_role + ')';
                authorElem.classList.add('author');
                authorElem.style.fontStyle = 'italic';
                authorElem.style.color = '#6e6e6e';

                contentElem.innerHTML = data.content;

                contentArea.appendChild(titleElem);
                contentArea.appendChild(authorElem);
                contentArea.appendChild(contentElem);

                let buttonContainer = contentArea.querySelector('.button-container');
                if (!buttonContainer) {
                    buttonContainer = document.createElement('div');
                    buttonContainer.classList.add('button-container');
                    contentArea.appendChild(buttonContainer);
                } else {
                    buttonContainer.innerHTML = '';
                }

                const canEdit = data.author === currentUser || canDeleteComments;

                if (canEdit) {
                    let editButton = document.createElement('button');
                    editButton.textContent = 'Edit';
                    editButton.classList.add('edit-button');
                    editButton.onclick = () => editArticle(articleId, data.title, data.content);
                    buttonContainer.appendChild(editButton);

                    let deleteButton = document.createElement('button');
                    deleteButton.textContent = 'Delete';
                    deleteButton.classList.add('delete-button');
                    deleteButton.onclick = () => deleteArticle(articleId);
                    buttonContainer.appendChild(deleteButton);
                }

                document.getElementById('comment-section').style.display = 'block';
                loadComments(articleId);
            })
            .catch(error => console.error('Error loading the article:', error));
    }

    function loadComments(articleId) {
        fetch('/api/comments/' + articleId)
            .then(response => response.json())
            .then(comments => {
                const commentList = document.getElementById('comment-list');
                commentList.innerHTML = '';

                comments.forEach(comment => {
                    const listItem = document.createElement('li');
                    listItem.innerHTML = `
                        <strong>${comment.commenter} (${comment.commenter_role}):</strong> ${comment.content} <br><small>${comment.comment_date}</small>
                        ${(canDeleteComments || comment.commenter === currentUser) ? `<button onclick="deleteComment(${comment.id})" class="delete-button">Delete</button>` : ''}
                    `;
                    commentList.appendChild(listItem);
                });
            })
            .catch(error => console.error('Error loading comments:', error));
    }

    function submitComment() {
        const commentText = document.getElementById('comment-text').value;
        const articleId = currentArticleId;
        const commenter = currentUser;

        if (commentText && articleId) {
            fetch('/api/add_comment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ article_id: articleId, commenter: commenter, content: commentText })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const commentList = document.getElementById('comment-list');
                    const listItem = document.createElement('li');
                    listItem.innerHTML = `<strong>${commenter}:</strong> ${commentText} <br><small>Now</small> ${(canDeleteComments || commenter === currentUser) ? `<button onclick="deleteComment(${data.comment_id})" class="delete-button">Delete</button>` : ''}`;
                    commentList.appendChild(listItem);
                    document.getElementById('comment-text').value = '';
                } else {
                    alert('Failed to post comment');
                }
            })
            .catch(error => console.error('Error posting comment:', error));
        }
    }

    function deleteComment(commentId) {
        fetch(`/api/delete_comment/${commentId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                loadComments(currentArticleId);
            } else {
                alert('Error: ' + data.error);
            }
        })
        .catch(error => console.error('Error deleting comment:', error));
    }

    function submitEdit(articleId) {
        const title = document.getElementById('edit-title').value;
        const content = document.getElementById('edit-content').value;

        fetch(`/api/edit_article/${articleId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ title, content })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Article updated successfully.');
                loadArticle(articleId);
                updateArticleList();
            } else {
                alert('Error updating article: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error during fetch operation:', error);
        });
    }

    function editArticle(articleId, title, content) {
        const contentArea = document.querySelector('.content-area');
        contentArea.innerHTML = `
            <h1>Editing: ${title}</h1>
            <form onsubmit="submitEdit(${articleId}); return false;">
                <input type="text" id="edit-title" value="${title}" />
                <textarea id="edit-content">${content}</textarea>
                <button type="submit">Submit Changes</button>
            </form>
        `;
    }

    function deleteArticle(articleId) {
        fetch('/api/delete_article/' + articleId, { method: 'POST' })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Article deleted successfully.');
                    window.location.reload();
                } else {
                    alert('Error deleting article: ' + data.error);
                }
            })
            .catch(error => console.error('Error deleting the article:', error));
    }

    function updateArticleList() {
        fetch('/api/articles')
        .then(response => response.json())
        .then(articles => {
            const listContainer = document.querySelector('.side-nav ul');
            listContainer.innerHTML = '';

            articles.forEach(article => {
                const listItem = document.createElement('li');
                const link = document.createElement('a');
                link.href = 'javascript:void(0);';
                link.textContent = article.title;
                link.onclick = () => loadArticle(article.id);
                listItem.appendChild(link);
                listContainer.appendChild(listItem);
            });
        })
        .catch(error => console.error('Error loading articles:', error));
    }
</script>
{% endblock %}
