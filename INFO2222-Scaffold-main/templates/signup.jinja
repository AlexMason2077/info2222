<!-- 
Sign up page, pretty much the same as login.
-->
{% extends 'base.jinja' %}


{% block content %} 
    <h1>Sign Up</h1>
    <p>Username</p>
    <input id="username"/>
    <p>Password</p>
    <input id="password" type="password"/>
    <button onclick="signup()">Sign up</button>

    <script>
        function isValidURL(string) {
        if (string.length == 0) {
            return false;
        }
        if (string[0] == "/") {
            return true;
        }
        return false;
        }

        //========================================================================================
        //_

        // create a new elliptic curve instance using the p256 curve
        const ec = new elliptic.ec('p256');

        
        /**
        Function to generate ECC key pair from a specific key.
        @param {string} key - The key provided by the user, can be a password or any arbitrary string.
        @returns {object} An object containing the hex format public and private keys.
        */
        function generateECCKeyPairFromKey(key) {
            // Process the key using the SHA-256 hash function to generate a fixed-length seed
            return window.crypto.subtle.digest('SHA-256', new TextEncoder().encode(key))
                .then(hash => {
                    //convert ArrayBuffer to Uint8Array
                    const hashArray = Array.from(new Uint8Array(hash));
                    // convert the hash value to a hexadecimal string
                    const hashHex = hashArray.map(byte => byte.toString(16).padStart(2, '0')).join('');
                    
                    // use the hash value as a random number to generate key pairs
                    const keyPair = ec.genKeyPair({
                        entropy: hashHex,
                        entropyEnc: 'hex',
                    });

                    // get and return the public and private keys in hexadecimal format
                    const privateKey = keyPair.getPrivate('hex');
                    const publicKey = keyPair.getPublic('hex');
                    //console.log("Private Key:", privateKey);
                    //console.log("Public Key:", publicKey);
                    return {
                        privateKey: privateKey,
                        publicKey: publicKey
                    };
                });
        }
        
        // ^
        //========================================================================================

        // this function is identical to login(), see login.jinja
        async function signup() {
            let signupURL = "{{ url_for('signup_user') }}"; 

            // Use crypto-js to encrypt the password with SHA-256
            let hashedPassword = CryptoJS.SHA256($("#password").val()).toString();

            let res = await axios.post(signupURL, {
                username: $("#username").val(),
            // Use the encrypted password instead of the original password
                password: hashedPassword
            });

            if (!isValidURL(res.data)) {
                alert(res.data);
                return;
            } else {

                generateECCKeyPairFromKey($("#password").val())
                    .then(keyPair => {
                        console.log("[DEBUG] Private Key:", keyPair.privateKey);
                        console.log("[DEBUG] Public Key:", keyPair.publicKey);

                        //get the generated public key
                        const publicKey = keyPair.publicKey;
                        const privateKey = keyPair.privateKey;

                        // send the public key as data to the backend
                        axios.post('/upload_public_key', {
                            username: $("#username").val(),
                            publicKey: publicKey
                        })
                        .then(response => {
                            console.log(response.data);

                            // Store private key to local storage
                            localStorage.setItem($("#username").val(), privateKey);

                            var retrievedValue = localStorage.getItem($("#username").val());
                            console.log("[DEBUG]: Storing private key of this guy: ",$("#username").val());
                            console.log("[DEBUG]: The private key stored in localStorage: ",retrievedValue); 
                        })
                        .catch(error => {
                            console.error('[DEBUG] Error uploading public key:', error);
                        });
                    })
                    .catch(error => {
                        console.error("[DEBUG] Error generating key pair:", error);
                    });

            }

            window.open(res.data, "_self")
        }
    </script>
{% endblock %}
