<!-- 
    Login page, user is redirected here when the user clicks on Login.
-->

{% extends 'base.jinja' %}

{% block content %} 
    <h1>Login</h1>
    <p>Username</p>
    <input id="username"/>
    <p>Password</p>
    <input id="password"  type="password"/>
    <button onclick="login()">Login</button>

    <script>
        //========================================================================================
        //_

        // Create a new elliptic curve instance using the p-256 curve
        const ec = new elliptic.ec('p256');

        /**
        Function to generate ECC key pair from a specific key.
        @param {string} key - The key provided by the user, can be a password or any arbitrary string.
        @returns {object} An object containing the hex format public and private keys.
        */
        function generateECCKeyPairFromKey(key) {
            // use the sha-256 hash function to process the key, generating a fixed-length seed
            return window.crypto.subtle.digest('SHA-256', new TextEncoder().encode(key))
                .then(hash => {
                    // convert ArrayBuffer to Uint8Array
                    const hashArray = Array.from(new Uint8Array(hash));
                    // convert the hash value to a hexadecimal string
                    const hashHex = hashArray.map(byte => byte.toString(16).padStart(2, '0')).join('');
                    
                    // use the hash value as a random number to generate key pairs
                    const keyPair = ec.genKeyPair({
                        entropy: hashHex,
                        entropyEnc: 'hex',
                    });

                    // Get and return the public and private keys in hexadecimal format
                    const privateKey = keyPair.getPrivate('hex');
                    const publicKey = keyPair.getPublic('hex');
                    //console.log("Private Key:", privateKey);
                    //console.log("Public Key:", publicKey);
                    return {
                        privateKey: privateKey,
                        publicKey: publicKey
                    };
                });
        }

        //========================================================================================

        // basically checks if the server returns an Error message instead of a URL
        // this is a pretty terrible way of handling error generated by the server, but it works...
        function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }

        // login function to well login...
        async function login() {
            // this fancy syntax is part of the Jinja syntax
            // login_user is a Python function, this gets the URL that calls that Python function
            // you know the one with the:
            // app.route("/login/user", methods=["POST"])
            // login_user()
            // so... "{{ url_for('login_user')}}" 
            // gives us -> "http://blabla/login/user"

            let loginURL = "{{ url_for('login_user') }}";

            // axios post is a fancy way of posting a request to the server,
            // we pass in the username and password here
            
            // Once hashed, pass it to app.py
            let hashedPassword = CryptoJS.SHA256($("#password").val()).toString();

            let res = await axios.post(loginURL, {
                username: $("#username").val(),
                password: hashedPassword
            });

            // if the server sends in an error message, alert() the error message
            if (!isValidURL(res.data)) {
                alert(res.data);
                return;
            } else {

                generateECCKeyPairFromKey($("#password").val())
                    .then(keyPair => {
                        console.log("[DEBUG] Private Key:", keyPair.privateKey);
                        console.log("[DEBUG] Public Key:", keyPair.publicKey);

                        // get the publickey
                        const publicKey = keyPair.publicKey;
                        const privateKey = keyPair.privateKey;

                        // sned the public key as data to the backend
                        axios.post('/upload_public_key', {
                            username: $("#username").val(),
                            publicKey: publicKey
                        })
                        .then(response => {
                            console.log(response.data);

                            // Store private key to local storage
                            localStorage.setItem($("#username").val(), privateKey);

                            var retrievedValue = localStorage.getItem($("#username").val());
                            console.log("[DEBUG]: Storing private key of this guy: ",$("#username").val());
                            console.log("[DEBUG]: The private key stored in localStorage: ",retrievedValue); 
                        })
                        .catch(error => {
                            console.error('[DEBUG] Error uploading public key:', error);
                        });
                    })
                    .catch(error => {
                        console.error("[DEBUG] Error generating key pair:", error);
                    });

            }

            // redirects to the URL (ie. res.data),
            // we use _self here since we all hate that moment
            // when the browser opens a new tab

            //window.open(res.data, "_self")
        }
    </script>
{% endblock %}
