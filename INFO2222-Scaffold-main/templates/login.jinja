{% extends 'base.jinja' %}

{% block content %}
<style>
    body {
        font-family: 'Arial', sans-serif;
        background: linear-gradient(to right, #6e6e6e, #5036a4);
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0; /* 移除边距以确保全屏显示 */
    }
    .container {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%; /* 确保容器占满整个宽度 */
    }
    form {
        background: white;
        padding: 50px;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        width: 90%; /* 响应式宽度，最大不超过400px */
        max-width: 400px;
    }

    input[type="text"], input[type="password"] {
        font-family: 'Courier New', Courier, monospace;
        font-size: 15px;
        width: 100%;
        padding: 15px;
        margin: 10px 0;
        display: inline-block;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-sizing: border-box;
    }

    button {
        background-color: #4029a0;
        color: white;
        padding: 16px 20px;
        margin: 8px 0;
        margin-top: 20px;
        border: none;
        cursor: pointer;
        width: 100%;
        font-size: 18px;
        transition: 0.3s;
        border-radius: 20px;
    }
    button:hover {
        opacity: 0.75;
        transform: scale(1.02);
        transition: 0.3s;
    }
    button:active {
        transform: scale(0.97);
        transition: 0.3s;
        opacity: 1;
    }
    h1 {
        font-size: 50px;
        color: white;
        margin-bottom: 20px; /* 为标题和表单添加间隔 */
    }
</style>

<div class="container">
    <h1>Login</h1>
    <form>
        <p>Username</p>
        <input type="text" id="username" class="username"/>
        <p>Password</p>
        <input type="password" id="password" class="password"/>
        <button onclick="login(event)">Login</button>

    </form>
</div>

    <script>

        // basically checks if the server returns an Error message instead of a URL
        // this is a pretty terrible way of handling error generated by the server, but it works...
        function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }

        async function login(event) {
            event.preventDefault(); // 阻止表单的默认提交行为

            let loginURL = "{{ url_for('login_user') }}";

            try {
                let res = await axios.post(loginURL, {
                    username: $("#username").val(),
                    password: $("#password").val()
                });

                if (!isValidURL(res.data)) {
                    alert(res.data);
                } else {
                    window.location.href = res.data;
                }
            } catch (error) {
                alert("Login failed: " + error);
            }
        }

    </script>
{% endblock %}

