{% extends 'base.jinja' %}

{% block title %}Settings{% endblock %}

{% block content %}
<style>
body {
    font-family: 'Arial', sans-serif;
    background: #f0f0f0;
    margin: 0;
    padding: 0;
   
    height: 100vh;
}
    .settings-container {
        padding: 20px;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        max-width: 800px; 
        width: 100%; 
        margin: 100px auto;

    .user-info {
        display: flex;
        flex-direction: column; 
    }

    .user-info p {
        font-size: 18px;
        margin: 10px 0;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin: 20px 0;
    }

    table, th, td {
        border: 1px solid #ddd;
    }

    th, td {
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #007bff;
        color: white;
    }



    .role-btn {
        padding: 5px 10px;
        color: white;
        background-color: #007bff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin-right: 5px;
    }

    .role-btn:hover {
        background-color: #6e6e6e;
    }
</style>

<main>
    <div class="settings-container">
        <h2 data-i18n="settings">Settings</h2>
        <div class="user-info">
            <p><strong data-i18n="username">Username:</strong> {{ user.username }}</p>
            <p><strong data-i18n="role">Role:</strong> {{ user.role }}</p>
            <p><strong data-i18n="muted">Muted:</strong> {{ 'Yes' if user.is_muted else 'No' }}</p>
        </div>

        {% if user.role in ['admin', 'staff'] %}
        <h2 data-i18n="all_users">All Users</h2>
        <table>
            <thead>
                <tr>
                    <th data-i18n="username">Username</th>
                    <th data-i18n="role">Role</th>
                    <th data-i18n="muted">Muted</th>
                    <th data-i18n="actions">Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for u in all_users %}
                <tr>
                    <td>{{ u.username }}</td>
                    <td>{{ u.role }}</td>
                    <td>{{ 'Yes' if u.is_muted else 'No' }}</td>
                    <td>
                        {% if user.role == 'admin' or (user.role == 'staff' and u.role == 'student') %}
                        <button class="btn" onclick="toggleMute('{{ u.username }}', {{ 'false' if u.is_muted else 'true' }})" data-i18n="{{ 'unmute' if u.is_muted else 'mute' }}">
                            {{ 'Unmute' if u.is_muted else 'Mute' }}
                        </button>
                        {% endif %}
                        {% if user.role == 'admin' %}
                        <button class="role-btn" onclick="toggleRole('{{ u.username }}', '{{ 'staff' if u.role == 'student' else 'student' }}')" data-i18n="{{ 'make_staff' if u.role == 'student' else 'make_student' }}">
                            {{ 'Make Staff' if u.role == 'student' else 'Make Student' }}
                        </button>
                        {% endif %}
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        {% endif %}
    </div>
</main>

<script>
    function toggleMute(username, mute) {
        fetch(`/toggle_mute/${username}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ mute: mute }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload();
            } else {
                alert('Error: ' + data.error);
            }
        });
    }

    function toggleRole(username, role) {
        fetch(`/toggle_role/${username}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ role: role }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload();
            } else {
                alert('Error: ' + data.error);
            }
        });
    }

    document.addEventListener('DOMContentLoaded', () => {
        const language = Cookies.get('language') || 'en';
        setLanguage(language);
    });

    function setLanguage(language) {
        if (!translations[language]) return;

        document.querySelectorAll('[data-i18n]').forEach(element => {
            const key = element.getAttribute('data-i18n');
            if (translations[language][key]) {
                element.innerText = translations[language][key];
            }
        });

        document.querySelectorAll('[data-i18n-placeholder]').forEach(element => {
            const key = element.getAttribute('data-i18n-placeholder');
            if (translations[language][key]) {
                element.placeholder = translations[language][key];
            }
        });

        Cookies.set('language', language, { expires: 7 });
    }

    function logoutAndClearStorage() {
        // Redirect to the logout page
        window.location.href = '/logout';
    }
</script>
{% endblock %}
