<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %} 
   <style>

    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }
    

    #message_box {
        border: 1px solid black; 
        height: 400px; 
        width: 800px; 
        overflow: auto;
        padding: 2px;
    }

    #friend_list_box {
        position: fixed;
        bottom: 10px;
        right: 10px;
        width: 200px;
        height: 300px;
        border: 1px solid black;
        background-color: white;
        overflow: auto;
        padding: 10px;
        display: block; /* Remove 'display: none;' to make it visible */
    }


    .text  {
        margin-top: 2px;
        margin-bottom: 2px;
    }


</style>

<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
        <li style="display:inline-block">Username:  {{ username }} </li>
        <!-- logout button -->
            <li style="display:inline-block; margin-left: 10px;">
                <a href="javascript:void(0)" onclick="logoutAndClearStorage()" class="btn">Logout</a>
            </li>
    </ol>
</nav>

<h1>Messaging App </h1>
<main>
    <!-- The messages are displayed here -->
    <section id="message_box"></section>

    <!-- These part ideally should be a form element, 
    but I wrote this code a year ago and I don't want to break anything...-->
    <section id="chat_box">
        <p class="text">Chat with: </p>
        <input id="receiver" placeholder="username">
        <!-- MDN says its bad practice to use the onclick attribute,
        but we're using it anyways coz its easy :)-->
        <button onclick="join_room()">Chat</button>
    </section>

    <!-- The (message) input box is set to display: none initially, 
    this means the input box is "invisible" initially-->
    <section id="input_box" style="display: none" >
        <p class="text">Message: </p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <button onclick="leave()">Leave Room</button>
    </section>

    <!-- Friend List -->
    <section id="friend_list_box" style="display: block;">
        <h2>Friend List</h2>
        <ul id="friend_list">
            <!-- Friends will be added here dynamically or list them statically for now -->
        </ul>
    </section>

    <!-- Add Friend Section -->
<section id="add_friend_section">
    <h2>Add Friend</h2>
    <input id="friend_username" placeholder="Enter username">
    <button onclick="sendFriendRequest()">Add Friend</button>
</section>

<!-- Friend Requests Section -->
<section id="friend_requests_section">
    <h2>Friend Requests</h2>
    <ul id="friend_requests">
        <!-- Dynamically list friend requests here -->
    </ul>
</section>


</main>

<script src="/static/js/libs/socket.io.min.js"></script>
<script>

    let room_id = 0;
    let current_receiver_public_key = null;

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
     $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })

    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // invoke processMessage() when receive message
    socket.on("incoming", (data) => {
        processMessage(data);
    });

    function logoutAndClearStorage() {
        // Clear a specific record from localStorage, assuming the key name is 'userToken'
        localStorage.removeItem(username);
        
        // Redirect to the logout page
        window.location.href = '/logout';
    }


    socket.on('error', function(data) {
        alert(data.message);
    });

    // an incoming message arrives, we'll add the message to the message box
    function processMessage(data) {

        var privateKeyHex = localStorage.getItem(username); // get private key from local storage

        const {content, type, color = "black"} = data;

        let displayColor;
        switch (type) {
            case "text":
                try{
                    displayColor = color; 

                    // compute shared public key
                    var sharedKeyHex = computeSharedKeyFromHex(privateKeyHex,current_receiver_public_key);

                    console.log("[DEBUG] The content: ",content);
                    console.log("[DEBUG] Shared key ",sharedKeyHex);

                    const pattern = /(\w+):\s(.+?)(?=\s\w+:|$)/g;

                    // Match the string and extract the username and text content.
                    let match;
                    while ((match = pattern.exec(content)) !== null) {
                        // match[1] corresponds to the matched username, match[2] corresponds to the matched text content.
                        const username_message = match[1];
                        const text = match[2];

                        // console.log("User who sent this message:", username_message);
                        // console.log("Text:", text);
                      
                        const decryptedMessage = decryptMessage(text, sharedKeyHex);

                        console.log("[DEBUG] Decrypted message: ",decryptedMessage);

                        const { message, signature } = JSON.parse(decryptedMessage);

                        if (! (username === username_message)) {
                            if (!verifySignature(message, signature, current_receiver_public_key)) {
                                // console.error("Failed to pass digital signature");
                            }else{
                                // console.log("[DEBUG] Digital signature passed");
                            }
                        }
                        add_message(username_message + ": " + message, displayColor);
                    }
                    
                }catch (error){
                    console.error('[DEBUG] Error decrypting or verifying message:', error);
                    return; // Interrupt execution
                }
                break;
            case "system":
                displayColor = color; //red represents system messages
                add_message(content, displayColor);
                break;

            default:
                displayColor = "gray"; // gray represents unknown messages
        
    }
    }

    //===========================================================================
    const ec = new elliptic.ec('p256');

    /**
     * Calculate shared key
     * 
     * @param {String} privateKeyHex Private key of the current user(in hexadecimal string)
     * @param {String} publicKeyHex Public key of another user(hexadecimal string)
     * @returns {String} Hexadecimal string of the shared key
     */

    function computeSharedKeyFromHex(privateKeyHex, publicKeyHex) {
        // Convert the private key of the current user from a hexadecimal string to a key pair
        const ownKeyPair = ec.keyFromPrivate(privateKeyHex, 'hex');
        
        
        // Convert the public key of another user from a hexadecimal string to a public key object
        // Note: The public key needs to start with '04', indicating it is an uncompressed public key
        const otherPublicKey = ec.keyFromPublic(publicKeyHex, 'hex').getPublic();
        
        // calculate sharedKey
        const sharedKey = ownKeyPair.derive(otherPublicKey).toString(16);
        
        // print the sharedKey
        console.log('[DEBUG]: Shared Key:', sharedKey);
    
    return sharedKey;
    }

    //===========================================================================

    function hexStringToArrayBuffer(hexString) {
        const result = new Uint8Array(hexString.length / 2);
        for (let i = 0; i < hexString.length; i += 2) {
            result[i / 2] = parseInt(hexString.substring(i, i + 2), 16);
        }
        return result.buffer;
    }

    function encryptMessage(message, sharedKeyHex) {
        // Convert the shared key from a hexadecimal string to a WordArray, as required by crypto-js
        const key = CryptoJS.enc.Hex.parse(sharedKeyHex);
        
        // encrypt the messages
        const encrypted = CryptoJS.AES.encrypt(message, key, {
            mode: CryptoJS.mode.ECB, 
            padding: CryptoJS.pad.Pkcs7
        });
        
        // Return the string representation of the ciphertext
        return encrypted.toString();
    }

    function decryptMessage(encryptedMessage, sharedKeyHex) {
        const key = CryptoJS.enc.Hex.parse(sharedKeyHex);
        
        // decrypt the messages
        const decrypted = CryptoJS.AES.decrypt(encryptedMessage, key, {
            mode: CryptoJS.mode.ECB,
            padding: CryptoJS.pad.Pkcs7
        });
        
        // Return the decrypted original message
        return decrypted.toString(CryptoJS.enc.Utf8);
    }

    // sign the message
    function signMessage(message, privateKey) {
        const key = ec.keyFromPrivate(privateKey, 'hex');
        const msgHash = CryptoJS.SHA256(message).toString();
        const signature = key.sign(msgHash, 'hex');
        return signature.toDER('hex');
    }

    // verify the signature
    function verifySignature(message, signature, publicKey) {
        const key = ec.keyFromPublic(publicKey, 'hex');
        const msgHash = CryptoJS.SHA256(message).toString();
        return key.verify(msgHash, signature);
    }

        
    // we'll send the message to the server by emitting a "send" event
    async function send() {
        let message = $("#message").val();
        var privateKeyHex = localStorage.getItem(username); 

        console.log('[DEBUG]: local stored private key', privateKeyHex, 'USER: ', username);

        if (!privateKeyHex) {
            console.error('[DEBUG] Missing private key');
            return; // Interrupt execution
        }

        if (!current_receiver_public_key) {
            console.error('[DEBUG] Missing public key');
            return; // Interrupt execution
        }

        let encryptedMessage; // Declare outside of the try block for later use
        try {
            //generate signature
            const signature = signMessage(message, privateKeyHex);

            // append the signature to the message
            const messageWithSignature = JSON.stringify({ message: message, signature: signature });

            // calculate the sharedkey
            const sharedKeyHex = computeSharedKeyFromHex(privateKeyHex, current_receiver_public_key);

            // Encrypt th message and the signature
            encryptedMessage = encryptMessage(messageWithSignature, sharedKeyHex); 
            console.log("[DEBUG] Encrypted message with signature:", encryptedMessage);


        } catch (error) {
            console.error('Error computing shared key, signing, or encrypting message:', error);
            return; // interrupt execution
        }

        $("#message").val("");
        socket.emit("send", username, encryptedMessage, room_id);
    }


    function getPublicKey(username) {
        axios.post('/getPublicKey', {
            username: username  
        })
        .then(function (response) {
            if (response.data.public_key) {
                //console.log('[DEBUG]: Get Receiver ', username,' public key: ',response.data.public_key);
                current_receiver_public_key = response.data.public_key;
            } else if (response.data.error) {
                // The backend returned an error message
                console.error('[DEBUG]: Error:', response.data.error);
            } else {
                // The backend response format does not match the expected format
                console.error('[DEBUG]: Unexpected response format:', response.data);
            }
        })
        .catch(function (error) {
            if (error.response) {
                // The request has been sent, amnd the server responded with a status code
                console.error('Error:', error.response.data);
                console.error('Status:', error.response.status);
            } else if (error.request) {
                //No response received
                console.error('No response received:', error.request);
            } else {
                // Something happend while setting up the request, triggering an error
                console.error('Error:', error.message);
            }
        });
    }

    // Listen for the history message list from the server
    socket.on("incoming_messages_list", function(data) {
        data.messages.forEach(message => {
            // Call the processMessage function for each historical message
            processMessage(message);
        });
    });


    // we emit a join room event to the server to join a room
    function join_room(receiverUsername) {
        let receiver = receiverUsername || $("#receiver").val();
        leave();
        // pass in the receiver of our message to the server
        // as well as the current user's username
        getPublicKey(receiver);

        socket.emit("join", username, receiver, (res) => {
            console.log('in joining a room')
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();

            socket.emit("GetHistoryMessages", username, receiver); // get the history message
        });


    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");

        // Set the public key of the current interlocutor back to null
        current_receiver_public_key = null;

        socket.emit("leave", username, room_id);
        $("#message_box").html('');
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

    function sendFriendRequest() {
        let friendUsername = document.getElementById('friend_username').value;
        let senderUsername = "{{ username }}";
        if (friendUsername) {
            fetch('/send_friend_request', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    sender: senderUsername,
                    receiver: friendUsername
                }),
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log(data);
                // After successfully sending a friend request, emit a socket event
                if (data.error) {
                    alert(data.error); 
                } else {
                    alert(data.message)
                    socket.emit('friend_request_sent', {sender: senderUsername, receiver: friendUsername});
                }
            })
            .catch(error => {
        console.error('There has been a problem with your fetch operation:', error);
        alert('Failed to send friend request.');
            });
        }
    }


    //////////////////////////////////////////////////////////////////////////////
    // Function to update a friend request's status
    function updateFriendRequest(requestId, status) {
        fetch('/update_friend_request', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ request_id: requestId, status: status }),
        })
        .then(response => response.json())
        .then(data => {
            alert(data.message);
            // might need to retrieve and display the latest friend request list again
            fetchFriendRequests();
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to update friend request.');
        });
    }

    function fetchFriendRequests() {
        console.log('Fetching friend requests...');
        let currentUsername = "{{ username }}"; // Retrieve the current username from server-side rendering variables or from another source

        fetch(`/get_friend_requests?username=${currentUsername}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to fetch friend requests');
            }
            return response.json();
        })
        .then(friendRequests => {
            // get the container element for the friend request list
            const friendRequestsList = document.getElementById('friend_requests');
            // clear the current list content
            friendRequestsList.innerHTML = '';

            // iterate through all friend requests and add them to the list
            friendRequests.forEach(request => {
                // create a new list item
                const listItem = document.createElement('li');
                 if (request.sender === currentUsername) {
                // if the current user is the sender
                listItem.textContent = `To: ${request.receiver}`;
                 } else {
                // if the current user is the receiver
                listItem.textContent = `From: ${request.sender}`;

                //create accept and reject buttons
                const acceptButton = document.createElement('button');
                acceptButton.textContent = 'Accept';
                acceptButton.onclick = function() {
                    updateFriendRequest(request.id, 'approved');
                };
                const rejectButton = document.createElement('button');
                rejectButton.textContent = 'Reject';
                rejectButton.onclick = function() {
                    updateFriendRequest(request.id, 'rejected');
                };

                // append the buttons to the listitem
                listItem.appendChild(acceptButton);
                listItem.appendChild(rejectButton);
            }
                // add the listitem to the list
                friendRequestsList.appendChild(listItem);
            });
        })
        .catch(error => console.error('Error fetching friend requests:', error));
    }

    socket.on('friend_request_update', function(data) {
        console.log('Received update notification:', data.message);
        // Call the function to update friend requests
        fetchFriendRequests();
        fetchFriends();
    });
    
    // retrieve the friend request list when the page finishes loading
    document.addEventListener('DOMContentLoaded', function() {
    const socket = io();
    fetchFriendRequests();
    fetchFriends();
    });

    function fetchFriends() {
        // Read the current username from the data-username attribute of the body element
        let currentUsername = "{{ username }}";

        fetch(`/get_friends?username=${currentUsername}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to fetch friends');
            }
            return response.json();
        })
        .then(data => {
            const friendList = document.getElementById('friend_list');
            friendList.innerHTML = ''; // clear the existing friendlist

            // iterate through the returned friend data and create a list item for each friend   
            data.forEach(friend => {
                const li = document.createElement('li');
                const button = document.createElement('button');
                button.textContent = friend['username'];
                button.onclick = function() {
                    join_room(friend['username']);
                };
                li.appendChild(button);
                friendList.appendChild(li);
            });
        })
        .catch(error => console.error('Error fetching friends:', error));
    }

    // Retrieve the friend list when the page finishes loading
    document.addEventListener('DOMContentLoaded', fetchFriends);


////////////////////////////////////////////////////////////////////////////////
</script>
{% endblock %}