<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %} 
   <style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }

    #message_box {
        border: 1px solid black; 
        height: 400px; 
        width: 800px; 
        overflow: auto;
        padding: 2px;
    }

    #friend_list_box {
        position: fixed;
        bottom: 10px;
        right: 10px;
        width: 200px;
        height: 300px;
        border: 1px solid black;
        background-color: white;
        overflow: auto;
        padding: 10px;
        display: block; /* Remove 'display: none;' to make it visible */
    }


    .text  {
        margin-top: 2px;
        margin-bottom: 2px;
    }

</style>

<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
        <li style="display:inline-block">Username:  {{ username }} </li>
    </ol>
</nav>

<h1>Messaging App </h1>

<main>
    <!-- The messages are displayed here -->
    <section id="message_box"></section>

    <!-- These part ideally should be a form element, 
    but I wrote this code a year ago and I don't want to break anything...-->
    <section id="chat_box">
        <p class="text">Chat with: </p>
        <input id="receiver" placeholder="username">
        <!-- MDN says its bad practice to use the onclick attribute,
        but we're using it anyways coz its easy :)-->
        <button onclick="join_room()">Chat</button>
    </section>

    <!-- The (message) input box is set to display: none initially, 
    this means the input box is "invisible" initially-->
    <section id="input_box" style="display: none" >
        <p class="text">Message: </p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <button onclick="leave()">Leave Room</button>
    </section>

    <!-- Friend List -->
    <section id="friend_list_box" style="display: block;">
        <h2>Friend List</h2>
        <ul id="friend_list">
            <!-- Friends will be added here dynamically or list them statically for now -->
        </ul>
    </section>

    <!-- Add Friend Section -->
<section id="add_friend_section">
    <h2>Add Friend</h2>
    <input id="friend_username" placeholder="Enter username">
    <button onclick="sendFriendRequest()">Add Friend</button>
</section>

<!-- Friend Requests Section -->
<section id="friend_requests_section">
    <h2>Friend Requests</h2>
    <ul id="friend_requests">
        <!-- Dynamically list friend requests here -->
    </ul>
</section>


</main>

<script src="/static/js/libs/socket.io.min.js"></script>
<script>
    let room_id = 0;

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
     $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })


    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color="black") => {
        add_message(msg, color);
    })
    
    // we'll send the message to the server by emitting a "send" event
    function send() {
        let message = $("#message").val();
        $("#message").val("");
        socket.emit("send", username, message, room_id);  
    } 

    // we emit a join room event to the server to join a room
    function join_room(receiverUsername) {
       
        let receiver = receiverUsername || $("#receiver").val();
        leave();
        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("join", username, receiver, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
        });
     
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#message_box").html('');
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }
    function sendFriendRequest() {
        let friendUsername = document.getElementById('friend_username').value;
        let senderUsername = "{{ username }}";
        if (friendUsername) {
            fetch('/send_friend_request', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
    },
    body: JSON.stringify({
        sender: senderUsername, // 确保这里使用的是有效的用户名
        receiver: friendUsername // 同上
    }),
})
.then(response => {
    if (!response.ok) {
        throw new Error('Network response was not ok');
    }
    return response.json();
})
.then(data => console.log(data))
.catch(error => console.error('There has been a problem with your fetch operation:', error));
        }
    }

//////////////////////////////////////////////////////////////////////////////
// Function to update a friend request's status
function updateFriendRequest(requestId, status) {
    fetch('/update_friend_request', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ request_id: requestId, status: status }),
    })
    .then(response => response.json())
    .then(data => {
        alert(data.message);
        // 可能需要重新获取并展示最新的好友请求列表
        fetchFriendRequests();
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Failed to update friend request.');
    });
}

function fetchFriendRequests() {
    let currentUsername = "{{ username }}"; // 从服务器端渲染的变量或从其他方式获取当前用户名

    fetch(`/get_friend_requests?username=${currentUsername}`)
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to fetch friend requests');
        }
        return response.json();
    })
    .then(friendRequests => {
        // 获取好友请求列表的容器元素
        const friendRequestsList = document.getElementById('friend_requests');
        // 清空当前的列表内容
        friendRequestsList.innerHTML = '';

        // 遍历所有好友请求并添加到列表中
        friendRequests.forEach(request => {
            // 创建一个新的列表项
            const listItem = document.createElement('li');
            listItem.textContent = `From: ${request.sender}`;

            // 创建接受和拒绝按钮
            const acceptButton = document.createElement('button');
            acceptButton.textContent = 'Accept';
            acceptButton.onclick = function() {
                updateFriendRequest(request.id, 'approved');
            };
            const rejectButton = document.createElement('button');
            rejectButton.textContent = 'Reject';
            rejectButton.onclick = function() {
                updateFriendRequest(request.id, 'rejected');
            };

            // 将按钮添加到列表项中
            listItem.appendChild(acceptButton);
            listItem.appendChild(rejectButton);

            // 将列表项添加到列表中
            friendRequestsList.appendChild(listItem);
        });
    })
    .catch(error => console.error('Error fetching friend requests:', error));
}



// 页面加载完成时获取好友请求列表
document.addEventListener('DOMContentLoaded', fetchFriendRequests);

function fetchFriends() {
    // 从body元素的data-username属性读取当前用户名
    let currentUsername = "{{ username }}";

    fetch(`/get_friends?username=${currentUsername}`)
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to fetch friends');
        }
        return response.json();
    })
    .then(data => {
        const friendList = document.getElementById('friend_list');
        friendList.innerHTML = ''; // 清空现有的好友列表

        // 遍历返回的好友数据，为每个好友创建一个列表项
        data.forEach(friend => {
            const li = document.createElement('li');
            const button = document.createElement('button');
            button.textContent = friend['username']; // 假设每个好友对象都有一个'name'属性
            button.onclick = function() {
                join_room(friend['username']);
            };
            li.appendChild(button);
            friendList.appendChild(li);
        });
    })
    .catch(error => console.error('Error fetching friends:', error));
}

// 页面加载完成时获取好友列表
document.addEventListener('DOMContentLoaded', fetchFriends);


////////////////////////////////////////////////////////////////////////////////

</script>
{% endblock %}