<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %} 
<style>
    body {
        font-family: 'Arial', sans-serif; /* 统一字体 */
        background: linear-gradient(to right, #6e6e6e, #5036a4); /* 统一渐变背景 */
    }

    nav {
        border-bottom: 2px solid #4029a0; /* 使边界颜色与按钮颜色一致 */
        padding: 10px 0; /* 增加一些内边距 */
        background-color: rgba(255, 255, 255, 0.8); /* 轻微透明的白色背景 */
    }

    #message_box {
        border: 1px solid #ccc; /* 更柔和的边框颜色 */
        height: 400px;
        width: 800px;
        overflow: auto;
        padding: 10px;
        background-color: white; /* 白色背景 */
        border-radius: 10px; /* 圆角边框 */
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1); /* 添加阴影 */
    }

    #friend_list_box {
        position: fixed;
        bottom: 10px;
        right: 10px;
        width: 200px;
        height: 300px;
        border: 1px solid #ccc; /* 更柔和的边框颜色 */
        background-color: white;
        overflow: auto;
        padding: 10px;
        border-radius: 10px; /* 圆角边框 */
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1); /* 添加阴影 */
        display: block;
    }

    .text {
        margin-top: 2px;
        margin-bottom: 2px;
        color: #333; /* 暗灰色文字 */
    }

    nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 5px 10px; /* 减少内边距 */
        background-color: rgba(255, 255, 255, 0.9);
        font-size: 14px; /* 调整字体大小 */
    }

    .nav-link {
        padding: 5px 10px; /* 减少链接的内边距 */
        color: #4029a0;
        text-decoration: none;
        font-weight: bold;
    }

    .nav-link:hover {
        background-color: #e0d1f2;
        border-radius: 5px;
    }

    html, body {
        height: 100%; /* 确保 html 和 body 元素占满整个视窗高度 */
        margin: 0; /* 移除默认边距 */
        padding: 0; /* 移除默认内边距 */
        overflow-y: scroll; /* 总是显示垂直滚动条 */
    }

    body {
        min-height: 100vh; /* 设置最小高度为视窗的100% */
        display: flex;
        flex-direction: column;
    }

    main {
        flex: 1; /* 让 main 元素填充所有可用空间 */
    }
</style>


<nav>
    <!-- Left-aligned items -->
    <div>
        <a href="/home?username={{ username }}" class="nav-link">Home</a>
        <a href="/knowledge" class="nav-link">Knowledge</a>
        <a href="/settings" class="nav-link">settings</a>
    </div>

    <!-- Right-aligned items -->
    <div>
        <ol style="list-style: none; padding: 0;">
            <li style="display: inline-block; margin-right: 10px;">
                Username: {{ username }}
            </li>
            <li style="display: inline-block;">
                <a href="javascript:void(0)" onclick="logoutAndClearStorage()" class="btn">Logout</a>
            </li>
        </ol>
    </div>
</nav>


<h1>Messaging App </h1>
<main>
    <!-- The messages are displayed here -->
    <section id="message_box"></section>

    <!-- These part ideally should be a form element, 
    but I wrote this code a year ago and I don't want to break anything...-->
    <section id="chat_box">
        <p class="text">Chat with: </p>
        <input id="receiver" placeholder="username">
        <!-- MDN says its bad practice to use the onclick attribute,
        but we're using it anyways coz its easy :)-->
        <button onclick="join_room()">Chat</button>
    </section>

    <!-- The (message) input box is set to display: none initially, 
    this means the input box is "invisible" initially-->
    <section id="input_box" style="display: none" >
        <p class="text">Message: </p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <button onclick="leave()">Leave Room</button>
    </section>
    <!-- Add this to your HTML body where appropriate -->
<button onclick="showCreateGroupModal()">Create Group</button>

    <!-- Create Group Modal -->
    <div id="createGroupModal" style="display: none;">
        <h2>Create Group</h2>
        <label for="groupName">Group Name:</label>
        <input type="text" id="groupName">
        <label for="groupMembers">Add Members (comma separated usernames):</label>
        <input type="text" id="groupMembers">
        <button onclick="createGroup()">Create</button>
        <button onclick="hideCreateGroupModal()">Cancel</button>
    </div>

    <!-- Friend List -->
    <section id="friend_list_box" style="display: block;">
        <h2>Friend List</h2>
        <ul id="friend_list">
            <!-- Friends will be added here dynamically or list them statically for now -->
        </ul>
    </section>
    <!-- Group List Section -->
    <section id="group_list_box" style="display: block;">
        <h2>Group List</h2>
        <ul id="group_list">
        <!-- Groups will be added here dynamically -->
        </ul>
    </section>

    

    <!-- Add Friend Section -->
<section id="add_friend_section">
    <h2>Add Friend</h2>
    <input id="friend_username" placeholder="Enter username">
    <button onclick="sendFriendRequest()">Add Friend</button>
</section>

<!-- Friend Requests Section -->
<section id="friend_requests_section">
    <h2>Friend Requests</h2>
    <ul id="friend_requests">
        <!-- Dynamically list friend requests here -->
    </ul>
</section>


</main>

<script src="/static/js/libs/socket.io.min.js"></script>
<script>

    let room_id = 0;
 

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
     $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })

    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // invoke processMessage() when receive message
    socket.on("incoming", (data) => {
        add_message(data);
    });

    function logoutAndClearStorage() {
        // Redirect to the logout page
        window.location.href = '/logout';
    }

    socket.on('error', function(data) {
        alert(data.message);
    });


    //===========================================================================


        
    // we'll send the message to the server by emitting a "send" event
    async function send() {
        let message = $("#message").val();
        $("#message").val("");
        socket.emit("send", username, message,room_id);
    }



    // we emit a join room event to the server to join a room
    function join_room(receiverUsername) {
        let receiver = receiverUsername || $("#receiver").val();
        //leave();


        socket.emit("join", username, receiver, (res) => {
            console.log('in joining a room')
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
            socket.emit("GetHistoryMessages", username,receiver );

        });


    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#message_box").html('');
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

    function sendFriendRequest() {
        let friendUsername = document.getElementById('friend_username').value;
        let senderUsername = "{{ username }}";
        if (friendUsername) {
            fetch('/send_friend_request', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    sender: senderUsername,
                    receiver: friendUsername
                }),
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log(data);
                // After successfully sending a friend request, emit a socket event
                if (data.error) {
                    alert(data.error); 
                } else {
                    alert(data.message)
                    socket.emit('friend_request_sent', {sender: senderUsername, receiver: friendUsername});
                }
            })
            .catch(error => {
        console.error('There has been a problem with your fetch operation:', error);
        alert('Failed to send friend request.');
            });
        }
    }


    //////////////////////////////////////////////////////////////////////////////
    // Function to update a friend request's status
    document.addEventListener('DOMContentLoaded', function() {
    const socket = io();

    // Log socket connection events
    socket.on('connect', () => {
        console.log('Connected to WebSocket');
    });

    socket.on('disconnect', () => {
        console.log('Disconnected from WebSocket');
    });

    // Initial fetch of friend requests and friends
    fetchFriendRequests();
    fetchFriends();

    // Listen for WebSocket updates
    socket.on('update_friend_list', function(data) {
        console.log('Received update notification:', data.message);
        fetchFriends();
    });

    socket.on('friend_request_update', function(data) {
        console.log('Received friend request update notification:', data.message);
        fetchFriendRequests();
        fetchFriends();
    });

    socket.on('friend_removed', function(data) {
        console.log('Received friend removed notification:', data.message);
        alert(data.message);
        fetchFriends();
    });
});

function updateFriendRequest(requestId, status) {
    fetch('/update_friend_request', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ request_id: requestId, status: status }),
    })
    .then(response => response.json())
    .then(data => {
        alert(data.message);
        fetchFriendRequests(); // Re-fetch the friend request list to update UI
        fetchFriends(); // Re-fetch the friend list to update UI
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Failed to update friend request.');
    });
}

function fetchFriendRequests() {
    console.log('Fetching friend requests...');
    let currentUsername = "{{ username }}"; // Retrieve the current username from server-side rendering variables or from another source

    fetch(`/get_friend_requests?username=${currentUsername}`)
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to fetch friend requests');
        }
        return response.json();
    })
    .then(friendRequests => {
        // get the container element for the friend request list
        const friendRequestsList = document.getElementById('friend_requests');
        // clear the current list content
        friendRequestsList.innerHTML = '';

        // iterate through all friend requests and add them to the list
        friendRequests.forEach(request => {
            // create a new list item
            const listItem = document.createElement('li');
            if (request.sender === currentUsername) {
                // if the current user is the sender
                listItem.textContent = `To: ${request.receiver}`;
            } else {
                // if the current user is the receiver
                listItem.textContent = `From: ${request.sender}`;

                //create accept and reject buttons
                const acceptButton = document.createElement('button');
                acceptButton.textContent = 'Accept';
                acceptButton.onclick = function() {
                    updateFriendRequest(request.id, 'approved');
                };
                const rejectButton = document.createElement('button');
                rejectButton.textContent = 'Reject';
                rejectButton.onclick = function() {
                    updateFriendRequest(request.id, 'rejected');
                };

                // append the buttons to the listitem
                listItem.appendChild(acceptButton);
                listItem.appendChild(rejectButton);
            }
            // add the listitem to the list
            friendRequestsList.appendChild(listItem);
        });
    })
    .catch(error => console.error('Error fetching friend requests:', error));
}

function fetchFriends() {
    let currentUsername = "{{ username }}"; // Read the current username from server-side rendering variables or from another source

    fetch(`/get_friends?username=${currentUsername}`)
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to fetch friends');
        }
        return response.json();
    })
    .then(data => {
        const friendList = document.getElementById('friend_list');
        friendList.innerHTML = ''; // clear the existing friend list

        // iterate through the returned friend data and create a list item for each friend
        data.forEach(friend => {
            const li = document.createElement('li');
            const chatButton = document.createElement('button');
            chatButton.textContent = friend['username'];
            chatButton.onclick = function() {
                join_room(friend['username']);
            };
            const removeButton = document.createElement('button');
            removeButton.textContent = 'Remove';
            removeButton.onclick = function() {
                removeFriend(friend['username']);
            };
            const statusSpan = document.createElement('span');
            statusSpan.textContent = friend['is_online'] ? ' (Online)' : ' (Offline)';
            statusSpan.style.color = friend['is_online'] ? 'green' : 'red'; // Change text color based on online status

            li.appendChild(chatButton);
            li.appendChild(removeButton);
            li.appendChild(statusSpan);
            friendList.appendChild(li);
        });
        fetchGroups(currentUsername);
    })
    .catch(error => console.error('Error fetching friends:', error));
}

function removeFriend(friendUsername) {
    fetch('/remove_friend', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ friend_username: friendUsername })
    })
    .then(response => response.json())
    .then(data => {
        if (data.message) {
            console.log(data.message);
            alert('Friend removed successfully.');
            fetchFriends(); // Re-fetch the friend list to update UI
        } else if (data.error) {
            console.error(data.error);
            alert('Failed to remove friend: ' + data.error);
        }
    })
    .catch(error => {
        console.error('Error removing friend:', error);
        alert('Error removing friend.');
    });
}

//##############################################################################
//# group chat
//##############################################################################

function fetchGroups(username) {
    fetch(`/get_groups?username=${username}`)
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to fetch groups');
        }
        return response.json();
    })
    .then(groups => {
        const groupList = document.getElementById('group_list');
        groupList.innerHTML = '';

        groups.forEach(group => {
            const li = document.createElement('li');
            const chatButton = document.createElement('button');
            chatButton.textContent = group.name;
            chatButton.onclick = function() {
                join_group_chat(group.id);
            };

            li.appendChild(chatButton);
            groupList.appendChild(li);
        });
    })
    .catch(error => console.error('Error fetching groups:', error));
}

function showCreateGroupModal() {
    document.getElementById('createGroupModal').style.display = 'block';
}

function hideCreateGroupModal() {
    document.getElementById('createGroupModal').style.display = 'none';
}
function createGroup() {
    let groupName = document.getElementById('groupName').value;
    let groupMembers = document.getElementById('groupMembers').value.split(',').map(member => member.trim());

    fetch('/create_group', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ name: groupName, usernames: groupMembers })
    })
    .then(response => response.json())
    .then(data => {
        if (data.message) {
            console.log(data.message);
            alert('Group created successfully.');
            fetchFriends(); // Re-fetch the friend list to update UI
        } else if (data.error) {
            console.error(data.error);
            alert('Failed to create group: ' + data.error);
        }
        hideCreateGroupModal(); // Hide the modal after creation
    })
    .catch(error => {
        console.error('Error creating group:', error);
        alert('Error creating group.');
        hideCreateGroupModal(); // Hide the modal after error
    });
}
function joinGroup(groupId, username) {
    fetch('/join_group', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ group_id: groupId, username: username })
    })
    .then(response => response.json())
    .then(data => {
        if (data.message) {
            console.log(data.message);
            alert('Joined group successfully.');
        } else if (data.error) {
            console.error(data.error);
            alert('Failed to join group: ' + data.error);
        }
    })
    .catch(error => {
        console.error('Error joining group:', error);
        alert('Error joining group.');
    });
}

function sendGroupMessage(groupId, sender, message) {
    socket.emit("send_group_message", {
        group_id: groupId,
        sender: sender,
        message: message
    });
}

// Listen for incoming group messages
socket.on('incoming_group_message', function(data) {
    addGroupMessage(data.sender, data.message);
});

function addGroupMessage(sender, message) {
    let box = $("#group_message_box");
    let child = $(`<p></p>`).text(`${sender}: ${message}`);
    box.append(child);
}




////////////////////////////////////////////////////////////////////////////////
</script>
{% endblock %}